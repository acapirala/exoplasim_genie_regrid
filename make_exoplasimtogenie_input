function [] = make_exoplasimtogenie_input(fname, k1name)
%   *********************************************************
%   *** RE_GRID EXOPLASIM OUTPUT TO GENIE INPUT ***
%   *********************************************************
%
% (1) read in '.nc' files for last 10 years of model run
% (2) extract core data
%        (a) wind products
%        (b) planetary albedo
% (3) return genie input files
%        (a) wind field input (tau, spd) files 
%        (b) 1-d and 2-d planetary albedo files
%
%   *********************************************************
%
%   ***********************************************************************
%%
% *********************************************************************** %
% *** INITIALIZE ******************************************************** %
% *********************************************************************** %
%
% create GENIE grid
imax = 36;
jmax = 36;
% determine output grid size (remember: [rows columns]) 
[go_lonm,go_lone,go_latm,go_late,go_dm,go_de] = make_genie_grid(36,36,16,5000.0,-260.0,true,0);
%[axis_imid,axis_iedge,axis_jmid,axis_jedge,axis_kmid,axis_kedge] = make_genie_grid(imax,jmax,kmax,par_max_D,par_lon_off,opt_equalarea,par_add_Dk)
%1x36, 1x37, 1x36, 1x37, 1x16, 1x17


% *********************************************************************** %
% *** load input data *************************************************** %
% *********************************************************************** %

fnames = ['MOST.00090.nc'; 'MOST.00091.nc'; 'MOST.00092.nc'; ...
        'MOST.00093.nc'; 'MOST.00094.nc'; 'MOST.00095.nc'; ...
        'MOST.00096.nc'; 'MOST.00097.nc'; 'MOST.00098.nc'; ...
        'MOST.00099.nc'];
ncid = netcdf.open([fnames(10,:)], 'nowrite');
%read_axes_plasim
varid = netcdf.inqVarID(ncid, 'lat');
axislatcm = netcdf.getVar(ncid,varid);
axislatcm = flipud(axislatcm);
axislatce = [axislatcm-180/length(axislatcm)/2.0; 90.0];
varid  = netcdf.inqVarID(ncid,'lon');
axisloncm = netcdf.getVar(ncid,varid);
axislonce = [axisloncm-360/length(axisloncm)/2; 360.0-360/length(axisloncm)/2];
gilatae = axislatce; 
gilonae = axislonce;

%   *********************************************************
%   *** RE_GRID PRODUCTS                             ***
%   *********************************************************
%
%
%   wstress is organised :   level 1   tau_x at u point
%                            level 2   tau_x at v point
%                            level 3   tau_y at u point
%                            level 4   tau_y at v point
%
%   wvelocity is organised : level 1   x velocity at grid point
%                            level 2   y velocity at grid point
%
%   wspeed is organised :    level 1   speed at grid point
%
%   str input KEY:
% str(1).nc == par_nc_axes_name
% str(2).nc == par_nc_topo_name
% str(3).nc == par_nc_atmos_name
% str(4).nc == par_nc_mask_name
% str(5).nc == par_nc_coupl_name
% str(6).nc == par_nc_ocean_name
%
%   *********************************************************
%% 

% *** Load and process data -- wind stress and velocity *********** %
% NOTE: wind stress in units of: N/m^2

% set up
% U COMPONENT OF WIND STRESS - 00099
varid = netcdf.inqVarID(ncid, 'tauu');
loctaux(:,:,:) = netcdf.getVar(ncid,varid);
% V COMPONENT OF WIND STRESS - 00099
varid  = netcdf.inqVarID(ncid,'tauv');
loctauy(:,:,:) = netcdf.getVar(ncid,varid);
months = size(loctaux, 3);
% U COMPONENT OF SURFACE AIR WIND - 00099
varid = netcdf.inqVarID(ncid, 'ua');
locvelu(:,:,:,:) = netcdf.getVar(ncid,varid);
% V COMPONENT OF SURFACE AIR WIND - 00099
varid = netcdf.inqVarID(ncid, 'va');
locvelv(:,:,:,:) = netcdf.getVar(ncid,varid);
% set up ANNUAL averaged input arrays - 00099
yeartauu = zeros(size(loctaux(:,:,1))); %64x32 db
yeartauv = zeros(size(loctaux(:,:,1)));
yearvelu = zeros(size(loctaux(:,:,1)));
yearvelv = zeros(size(loctaux(:,:,1)));
% create annual average - 00099
for t=1:months 
        yeartauu = yeartauu + loctaux(:,:,t)/months;
        yeartauv = yeartauv + loctauy(:,:,t)/months;
        yearvelu = yearvelu + locvelu(:,:,t)/months;
        yearvelv = yearvelv + locvelv(:,:,t)/months;
end

% set up DECADAL averaged input arrays - 0009x
giwtauu = zeros(size(loctaux(:,:,1))); %64x32 db
giwtauv = zeros(size(loctaux(:,:,1)));
giwvelu = zeros(size(loctaux(:,:,1)));
giwvelv = zeros(size(loctaux(:,:,1)));
giwspd_av = zeros(size(loctaux(:,:,1)));
% add to decadal average
giwtauu = giwtauu + yeartauu(:,:)/10;
giwtauv = giwtauv + yeartauv(:,:)/10;
giwvelu = giwvelu + yearvelu(:,:)/10;
giwvelv = giwvelv + yearvelv(:,:)/10;
netcdf.close(ncid)
% LOOP decadal files
for f = 1:9
    %disp(f)
    ncid = netcdf.open([fnames(f,:)], 'nowrite');
    % U COMPONENT OF WIND STRESS - 0009x
    varid  = netcdf.inqVarID(ncid,'tauu');
    loctaux(:,:,:) = netcdf.getVar(ncid,varid);
    % V COMPONENT OF WIND STRESS - 0009x
    varid  = netcdf.inqVarID(ncid,'tauv');
    loctauy(:,:,:) = netcdf.getVar(ncid,varid);
    % set up empty ANNUAL averaged (wstress) input arrays
    yeartauu = zeros(size(loctaux(:,:,1))); %64x32 db
    yeartauv = zeros(size(loctaux(:,:,1)));
    % annual average wstress
    for t=1:months 
        yeartauu = yeartauu + loctaux(:,:,t)/months;
        yeartauv = yeartauv + loctauy(:,:,t)/months;
    end
    % add to decadal average
    giwtauu = giwtauu + yeartauu(:,:)/10;
    giwtauv = giwtauv + yeartauv(:,:)/10;
    % U COMPONENT OF SURFACE AIR WIND - 0009x
    varid = netcdf.inqVarID(ncid, 'ua');
    locvelu(:,:,:,:) = netcdf.getVar(ncid,varid);
    % V COMPONENT OF SURFACE AIR WIND - 0009x
    varid = netcdf.inqVarID(ncid, 'va');
    locvelv(:,:,:,:) = netcdf.getVar(ncid,varid);
    % set up empty ANNUAL averaged (wvel) input arrays
    yearvelu = zeros(size(loctaux(:,:,1)));
    yearvelv = zeros(size(loctaux(:,:,1)));
    % annual average wind velocity at surface
    for t=1:months 
        yearvelu = yearvelu + locvelu(:,:,10,t)/months;
        yearvelv = yearvelv + locvelv(:,:,10,t)/months;
    end
    % add to decadal average
    giwvelu = giwvelu + yearvelu(:,:)/10;
    giwvelv = giwvelv + yearvelv(:,:)/10;
end 
% calculate wspd -- average from uv
% (for backwards-compatability) 
giwspd_av = (giwvelu(:,:).^2 + giwvelv(:,:).^2).^0.5;
% re-orientate
giwtauu = giwtauu'; %32x64 and real-world orientation.
giwtauv = giwtauv';
giwvelu = giwvelu'; 
giwvelv = giwvelv';
giwspd_av = giwspd_av';

netcdf.close(ncid)

% *** load and process data -- albedo ****************************** %

% create output vector
vo_albd = 0.0*go_latm;
%j-edge grid in radians
loc_latm = (pi/180.0)*go_latm;

albd = zeros(64, 32);
for f = 1:10
    ncid = netcdf.open([fnames(f,:)], 'nowrite');
    % monthly TOA outgoing shortwave flux 'rsut'
    varid  = netcdf.inqVarID(ncid,'rsut');
    sw_out(:,:,:) = netcdf.getVar(ncid, varid);
    % monthly TOA net shortwave flux 'rst'
    varid  = netcdf.inqVarID(ncid,'rst');
    sw_net(:,:,:) = netcdf.getVar(ncid, varid);
    % set up arrays for ANNUAL averages
    months = size(sw_net, 3);
    year_sw_out = zeros(64, 32);
    year_sw_net = zeros(64, 32);
    % create annual average sw_out 
    for t=1:months 
        year_sw_out = year_sw_out + sw_out(:,:,t)/months;
    end
    % create annual average sw_net
    for t=1:months 
        year_sw_net = year_sw_net + sw_net(:,:,t)/months;
    end
    % calculate TOA incoming shortwave 
    year_sw_in = -1 * (year_sw_out - year_sw_net);
    % calculate ANNUAL avg albedo
    year_albd = (-1 * year_sw_out)./(year_sw_in);
    %add to decadal average
    albd = albd + year_albd(:,:)/10;
end

%reorientate; set up input grid
grid_albd = (albd)';
grid_albd(grid_albd > 0.55) = 0.55; %cap albedo at genie mature sea ice

netcdf.close(ncid)

% *********************************************************************** %

% *********************************************************************** %
% *** RE-GRID *********************************************************** %
% *********************************************************************** %
%
% *** set up GOLDSTEIN grid ********************************************* %
%
% Need to determine wind stress/albedo at u and v points of the Arakawa C
% grid in GENIE ...
%
%   ----v----
%   |       |
%   |   c   u
%   |       |
%   ---------
% 
% remember: [rows columns] == [j i]
% grid boundaries are as follows:
% GENIE c-grid: (golate,golone)   == jmax+1 x imax+1
% GENIE u-grid: (golatue,golonue) == jmax   x imax+1
% GENIE v-grid: (golatve,golonve) == jmax+1 x imax
%
% *********************************************************************** %

% create GENIE u and v edge axes
% latitude
golatue = go_late;
golatve = [go_latm 90.0]; 

% longitude
golonue = [go_lonm go_lonm(end)+360.0/imax];
golonve = go_lone;

%read and process .k1 file to output mask 
loc_k1 = load([k1name '.k1']);
k1 = zeros(36,36);
k1(:,:) = loc_k1(2:37,2:37);
k1(k1 < 17) = 1;
k1(k1 > 90) = 0;
gomask = k1;

%
% *** Put on a GOLDSTEIN grid ******************************************* %
%
% NOTE: make_regrid_2d takes transposed input grids -
% don't forget to transpose the re-gridded orientation back around again
%
% -> wind stress @ u point
% NOTE: GENIE u-grid: (golatue,golonue) == jmax   x imax+1
% apply p-grid mask to input wind stress grid
% replace NaNs with zeros
% apply GENIE mask to output wind stress
%
fprintf('       - Regridding wind stress (x) to GOLDSTEIN u-grid\n');
[gowtauuu,gofwtauuu] = make_regrid_2d(gilonae,gilatae,giwtauu',golonue,golatue,false);
gowtauuu(find(isnan(gowtauuu))) = 0.0;
gowtauuu = gowtauuu';
gowtauuu = gomask.*gowtauuu;

fprintf('       - Regridding wind stress (y) to GOLDSTEIN u-grid\n');
[gowtauvu,gofwtauvu] = make_regrid_2d(gilonae,gilatae,giwtauv',golonue,golatue,false);
gowtauvu(find(isnan(gowtauvu))) = 0.0;
gowtauvu = gowtauvu';
gowtauvu = gomask.*gowtauvu;

% -> wind stress @ v point
% NOTE: GENIE v-grid: (golatve,golonve) == jmax+1 x imax
% apply p-grid mask to input wind stress grid
% replace NaNs with zeros

fprintf('       - Regridding wind stress (x) to GOLDSTEIN v-grid\n');
[gowtauuv,gofwtauuv] = make_regrid_2d(gilonae,gilatae,giwtauu',golonve,golatve,false);
gowtauuv(find(isnan(gowtauuv))) = 0.0;
gowtauuv = gowtauuv';
gowtauuv = gomask.*gowtauuv;

fprintf('       - Regridding wind stress (y) to GOLDSTEIN v-grid\n');
[gowtauvv,gofwtauvv] = make_regrid_2d(gilonae,gilatae,giwtauv',golonve,golatve,false);
gowtauvv(find(isnan(gowtauvv))) = 0.0;
gowtauvv = gowtauvv';
gowtauvv = gomask.*gowtauvv;

% -> wind velocity
% NOTE: GENIE c-grid: (golate,golone) == jmax+1 x imax+1
% NOTE: DO NOT apply a mask (as the output is used globally by the EMBM)
% replace NaNs with zeros

fprintf('       - Regridding wind velocity (x) to GOLDSTEIN c-grid\n');
[gowvelu,gofwvelu] = make_regrid_2d(gilonae,gilatae,giwvelu',go_lone,go_late,false);
gowvelu(find(isnan(gowvelu))) = 0.0;
gowvelu = gowvelu'; 
gofwvelu = gofwvelu';

fprintf('       - Regridding wind velocity (y) to GOLDSTEIN c-grid\n');
[gowvelv,gofwvelv] = make_regrid_2d(gilonae,gilatae,giwvelv',go_lone,go_late,false);
gowvelv(find(isnan(gowvelv))) = 0.0;
gowvelv = gowvelv';
gofwvelv = gofwvelv';

% -> wind speed
% NOTE: GENIE c-grid: (golate,golone) == jmax+1 x imax+1
% NOTE: create only no-mask version
% NOTE: only one grid is used 
%       (no seperate atmopsheric grid or gilonae, gilatae axis vectors)
% replace NaNs with zeros
% apply GENIE mask to output wind speed

fprintf('       - Regridding wind speed to GOLDSTEIN c-grid\n');
[gowspd,gofwspd] = make_regrid_2d(gilonae,gilatae,giwspd_av',go_lone,go_late,false);
gowspd(find(isnan(gowspd))) = 0.0;
gowspd = gowspd';
gofwspd = gofwspd';
gowspd = gomask.*gowspd;

% -> albedo
% NOTE: not masked
% becomes zonally averaged and output as a 1d vector

fprintf('       - Regridding albedo to GOLDSTEIN c-grid\n');
[go_albd,go_falbd] = make_regrid_2d(gilonae,gilatae,grid_albd',go_lone,go_late,false);
go_albd  = go_albd';
go_falbd = go_falbd';
%figure; imagesc(go_albd); colorbar

%
% *** orientate output arrays ********************************************* %
%
%NOTE: output datagrid in this step is flipped vertically from real-world
%orientation for tau and wvel

% -> wind stress
gowtauuu = flipud(gowtauuu); %g_taux_u
gowtauuv = flipud(gowtauuv); %g_taux_v
gowtauvu = flipud(gowtauvu); %g_tauy_u
gowtauvv = flipud(gowtauvv); %g_tauy_v

% -> wind velocity
gowvelu = flipud(gowvelu);
gowvelv = flipud(gowvelv);

% -> wind speed
wspeed = gowspd;

% -> create zonal albedo 
vo_albd = mean(go_albd');
pln_albd = mean(vo_albd);

%
% *********************************************************************** %

% *********************************************************************** %
% *** SAVE DATA ********************************************************* %
% *********************************************************************** %
%
%NOTE: permuted datagrid (b) is rotated 90deg to the R from real-world
%except for wspeed; reshaped outfile is L-R through each real-world row 
%from S to N

% Save regridded data to file

% Taux at u point (g_taux_u == gowtauuu)
outname = [fname '.taux_u.dat'];
c = gowtauuu; b = permute(c, [2 1]); 
a = reshape(b, [imax*jmax 1]);
save (outname, 'a', '-ascii');
fprintf('       - Written tau u (u point) data\n');

% Taux at v point (g_taux_v == gowtauuv)
outname = [fname '.taux_v.dat'];
c = gowtauuv; b = permute(c, [2 1]); 
a = reshape(b, [imax*jmax 1]);
save (outname, 'a', '-ascii');
fprintf('       - Written tau u (v point)\n');

% Tauy at u point (g_tauy_u == gowtauvu)
outname = [fname '.tauy_u.dat'];
c = gowtauvu; b = permute(c, [2 1]); 
a = reshape(b, [imax*jmax 1]);
save (outname, 'a', '-ascii');
fprintf('       - Written tau v (u point) data\n');

% Tauy at v point (g_tauy_v == gowtauvv)
outname = [fname '.tauy_v.dat'];
c = gowtauvv; b = permute(c, [2 1]); 
a = reshape(b, [imax*jmax 1]);
save (outname, 'a', '-ascii');
fprintf('       - Written tau v (v point) data\n');

% U wind velocity 
outname = [fname '.wvelx.dat'];
c = gowvelu; b = permute(c, [2 1]); 
a = reshape(b, [imax*jmax 1]);
save (outname, 'a', '-ascii');
fprintf('       - Written u wind speed data\n');

% V wind velocity
outname = [fname '.wvely.dat'];
c = gowvelv; b = permute(c, [2 1]); 
a = reshape(b, [imax*jmax 1]);
save (outname, 'a', '-ascii');
fprintf('       - Written v wind speed data\n');

% Save 2-D ASCII wind speed scalar for BIOGEM
outname = [fname '.windspeed.dat'];
a = wspeed;
save(outname,'a','-ascii');
fprintf('       - Written BIOGEM windspeed data\n');

% 1D zonal albedo 
fprint_1Dn(vo_albd(:),[fname '.albd.dat'],'%8.4f','%8.4f',true,false);

fprintf('       - Written albd data\n')

%
% *********************************************************************** %

% *********************************************************************** %
% *** END *************************************************************** %
% *********************************************************************** %
%
%
% *********************************************************************** %
